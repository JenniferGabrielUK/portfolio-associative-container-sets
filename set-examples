// portfolio-associative-container-sets.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <algorithm>
#include <iterator>
#include <set>
#include <string>
#include <vector>

class Person {
    friend std::ostream& operator << (std::ostream& os, const Person& p);
    std::string name;
    int age{};
public:
    Person() : name{ "unknown" }, age{ 0 } {}
    Person(std::string name, int age) : name{ name }, age{ age } {}
    bool operator <(const Person& rhs) const {
        return this->age < rhs.age; }
    bool operator==(const Person& rhs) const {
        return (this->name == rhs.name && this->age == rhs.age);
    }
};

std::ostream& operator<< (std::ostream& os, const Person& p) {
    os << p.name << ": " << p.age;
    return os;
}

template <typename T>
void display(const std::set<T>& t) {
    std::cout << "[";
    for (const auto& elem : t) {
        std::cout << elem << ", ";
    }
    std::cout << "]" << std::endl;
}

void test1() {
    std::cout << "\nTest1====================" << std::endl;
    std::set<int> s1{ 1,4,2,3,3,3,5,7 };
    display(s1);
    s1 = { 1,2,3,4,5,6,1,1,9,2,3,4,6,7 };
    display(s1);
    s1.insert(0);
    s1.insert(10);
    display(s1);
    if (s1.count(10))
        std::cout << "10 is in the set" << std::endl;
    else
        std::cout << "10 is not in the set" << std::endl;

    auto it = s1.find(5);
    if (it != s1.end())
        std::cout << "Found: " << *it << std::endl;
    s1.clear();
    if (s1.size() == 0)
        std::cout << "Set is empty." << std::endl;
    else
        display(s1);
}

void test2() {
    std::cout << "\nTest2===================" << std::endl;
    std::set<Person> accounts {
        {"Jenny", 18},
        { "Elizabeth", 19 },
        { "Gabriel", 20 }
    };
    display(accounts);
    accounts.emplace("Jennifer", 17); //the order of display will represent the operator< overload
    display(accounts);
    accounts.emplace("Gandalf", 430);
    display(accounts);
    auto it = accounts.find(Person{ "Jenny", 18 });
    if (it != accounts.end())
        accounts.erase(it);
    std::cout << ".erase being called on accounts set." << std::endl;
    display(accounts);
    it = accounts.find(Person{ "Gandalf",430 });
    if (it != accounts.end())
        accounts.erase(it);
    std::cout << ".erase being called on accounts set." << std::endl;
    display(accounts);
    it = accounts.find(Person{ "x", 19 }); //finds Elizabeth as uses the operator< overload.
    if (it != accounts.end())
        accounts.erase(it);
    std::cout << ".erase being called on accounts set." << std::endl;
    display(accounts);
    it = accounts.find(Person{ "Gabriel", 0 }); 
    if (it != accounts.end())
        accounts.erase(it); //wont erase Gabriel as the age variable is set to 0
    std::cout << ".erase being called on accounts set." << std::endl;
    display(accounts);
}

void test3() {
    std::cout << "\nTest3===================" << std::endl;
    std::set <std::string> s2{ "Jenny", "Elizabeth", "Gabriel" };
    display(s2);
    auto result = s2.insert("Jennifer");
    display(s2);
    std::cout << std::boolalpha;
    std::cout << "First: " << *(result.first) << std::endl;
    std::cout << "Second: " << result.second << std::endl; //true - insertion of a new set variable
    std::cout << std::endl;
    result = s2.insert("Jenny");
    display(s2);
    std::cout << std::boolalpha;
    std::cout << "First: " << *(result.first) << std::endl;
    std::cout << "Second: " << result.second << std::endl; //false - insertion of a new set variable
    std::cout << std::endl;
}

int main()
{
    test1();
    test2();
    test3();
    return 0;
}
